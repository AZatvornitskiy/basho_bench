#+SETUPFILE: html-style.org
#+SETUPFILE: pdf-style.org
#+TITLE:     Basho Bench 0.1 Documentation
#+AUTHOR:    Dave Smith (code) / Rusty Klophaus (docs)
#+EMAIL:     dizzyd@basho.com, rusty@basho.com

* Overview
** Purpose

  Basho Bench is a benchmarking tool created to conduct accurate and
  repeatable performance tests and stress tests, and produce performance graphs.

  Originally developed by Dave Smith (Dizzy) to benchmark Riak, Basho's
  key/value datastore, it exposes a pluggable driver interface and has
  been extended to serve as a benchmarking tool against a variety of
  projects. New drivers can be written in Erlang and are generally
  less than 200 lines of code.

** How does it work?

   When Basho Bench starts (basho\_bench.erl), it reads the
   configuration (basho\_bench\_config.erl), creates a new results
   directory, then sets up the
   test. (basho\_bench\_app.erl/basho\_bench\_sup.erl)

   During test setup, Basho Bench creates:
 
   + One *log process* (basho\_bench\_log.erl). During startup, this
     creates a new /log.txt/ file in the currently results directory, to
     which output is logged at the specified logging level.
     
   + One *stats process* (basho\_bench\_stats.erl). This receieves
     notifications when an operation completes, plus the elapsed time
     of the operation, and stores it in a histogram. At regular
     intervals, the histograms are dumped to /summary.csv/.
  
   + N *child workers*, where N is specified by the /concurrent/
     configuration setting. (basho\_bench\_worker.erl). The worker process
     wraps a driver module, specified by the /driver/ configuration
     setting, calling the appropriate operations at the configured intervals.
  
   Once these processes have been created and initialized, Basho Bench
   sends a run command to all worker processes, causing them to begin
   the test. Each process acts independently in a semi-random
   fashion. Each benchmark tests is started with a predifined random
   seed, so the operations occur in a random order, but the sequence of
   operations will be exactly the same if the same benchmark is run
   again with the same settings.
  
   During the test, the worker processes repeatedly call Driver:run/4,
   passing in the next operation to run, a keygen function, a valuegen
   function, and the last state of the driver.
  
   The driver runs the operation, and returns ={ok, NewState}=,
   ={error, Reason, NewState}=, ={'EXIT', Reason}=, or ={stop,
   Reason}=. The worker process times the operation, and reports this
   to the stats process when the operation has completed.
  
   Finally, once the test has been run for the duration specified in
   the config file, all workers and stats processes are told to stop,
   and the benchmark ends.
  
   At this point, results can be found in /./tests/current/. Previous
   results are in timestamped directories of the form /./tests/YYYYMMDD-HHMMSS/.

* Installation

** Prerequisites

   + Erlang R13B03 - http://erlang.org/download.html
   + R - http://www.r-project.org/ (for graphing)

** Building from Source

  Basho Bench is currently available as source code only. To get the
  latest code, clone the basho\_bench repository:

  : hg clone ssh://hg@beachhead.bashotechnologies.net/basho_bench-0.1 basho_bench
  : cd basho_bench
  : make

  *TODO: Put the code somewhere publicly accessible?*

* Usage

  Run basho\_bench:
  
  : ./basho_bench myconfig.config

  This will generate results in /tests/current/. You will need to
  create a configuration file. The recommended approach is to start
  from a file in the /examples/ directory and modify settings using the
  /Configuration/ section below for reference.

* Generating Benchmark Graphs

  The output of basho\_bench can be used to create graphs showing:
  
  + Throughput - Requests per second over time.

  + Latency at 99th percentile, 99.9th percentile and max latency for
    get and put operations.

  + Median latency, mean latency, and 95th percentile latency for get
    and put operations.

** Prerequisites

   The R statistics language is needed to generate graphs. 

   + More information: http://www.r-project.org/. 

   + Download R: http://cran.r-project.org/mirrors.html

   Follow the instructions for your platform to install R.
   
** Generating a Graphs

   To generate a benchmark graph against the current results, run:

   : make results

   This will create a results file in /tests/current/results.png/.

   You can also run this manually by changing to the latest set of
   results and invoking the R command.

   : cd tests/current
   : R --vanilla < ../../priv/basho_bench.r

* Configuration

  Basho Bench ships with a number of sample configuration files,
  available in the /examples/ directory.

** Global Config Settings
*** mode
    
    The *mode* setting determines whether basho\_bench pounds the
    application under test as quickly as possible, or instead spaces
    the requests out at some interval.

    Default is 5 operations per second per worker.
    
    : % Run at max, ie: as quickly as possible.    
    : {mode, max}

    : % Run 15 operations per second.
    : {mode, {rate, 15}}
    
*** concurrent

    The number of concurrent worker processes. The default is 3 worker processes.

    : % Run 10 concurrent processes.
    : {concurrent, 10}

*** duration

    The duration of the test, in minutes. The default is 5 minutes.

    : % Run the test for one hour.
    : {duration, 60}

*** log\_level
   
    The *log\_level* setting determines which messages Basho Bench will
    log to the console and to disk.

    Default level is *debug*.

    Valid levels are:
    
    : % Log all messages.
    : {log_level, debug}.

    : % Log informational messages and higher.
    : {log_level, info}.

    : % Log warning messages and higher.
    : {log_level, warn}.

    : % Only log error messages.
    : {log_level, error}

*** report\_interval
    
    How often, in seconds, should the stats process write histogram
    data to disk. Default is 10 seconds.

    : % Save stats every 12 seconds.
    : {report_interval, 12}

*** driver

    The module name of the driver to use. Provided drivers are:

    : % Benchmark a Riak server using the Erlang client.
    : {driver, basho_bench_driver_riakclient}.

    : % Benchmark a Riak server via the HTTP interface.
    : {driver, basho_bench_driver_http}.

    : % Benchmark the Innostore library.
    : {driver, basho_bench_driver_innostore}.

    : % Benchmark a dets file.
    : {driver, basho_bench_driver_dets}.

*** code\_paths 

    Some drivers need additional Erlang code in order to run. Specify
    the paths to this code using the *code\_paths* configuration
    setting.

    The paths in this setting should be the root path of the Erlang
    library containing the code. In other words, specify the directory
    above the /ebin/ directory.

    For example:
    
    : {code_paths, [
    :   "deps/stats",
    :   "../riak_src/apps/riak_kv",
    :   "../riak_src/apps/riak_core"]}.

*** operations

    The possible operations that the driver will run, plus their
    "weight" or likelihood of being run. Default is =[{get,4},
    {put,4}, {delete, 1}]= which means that out of every 9 operations,
    'get' will be called four times, 'put' will called four times, and
    'delete' will be called once, on average.

    : % Run 80% gets, 20% puts.
    : {operations, [{get, 4}, {put, 1}]}.
    
*** key\_generator

    The generator to use for creating keys. Generators are defined in
    /basho\_bench\_keygen.erl/. 

    Default is ={key_generator, {uniform_int, 100000}}=.

    : % Use a randomly selected integer between 1 and 10,000
    : {key_generator, {uniform_int, 10000}}.

    : % Use a randomly selected integer between 1 and 10,000, as binary.
    : {key_generator, {uniform_int_bin, 10000}}.

    : % Use a randomly selected integer between 1 and 10,000, as string.
    : {key_generator, {uniform_int_str, 10000}}.

    : % Use a sequential integer from 1 to 10,000.
    : % If max is reached, then the process will terminate causing the worker
    : % to restart.
    : {key_generator, {sequential_int, 10000}}.

    : % Use a sequential integer from 1 to 10,000, as binary.
    : % If max is reached, then the process will terminate causing the worker
    : % to restart.
    : {key_generator, {sequential_int_bin, 10000}}.

    : % Use a pareto distributed integer between 1 and 10,000, with shape 0.5. 
    : {key_generator, {pareto_int, 10000, 0.5}}.

*** value\_generator

    The generator to use for creating values. Generators are define in
    /basho\_bench\_valgen.erl/. Default is ={value\_generator, {fixed\_bin,
    100}}=.

    : % Use a randomly generated sequence of 512 bytes.
    : {value_generator, {fixed_bin, 512}}.

*** test\_dir

    The directory in which to write result data. The default is
    /tests/.

    : % Save results to the "mytests" directory.
    : {test_dir, "mytests"}.

*** rng\_seed

    The initial random seed to use. This is explicitly seeded, rather
    than seeded from the current time, so that a test can be run in a
    predictable, repeatable fashion.

    Default is ={rng_seed, {42, 23, 12}}=.

    : % Seed to {12, 34, 56}
    : {rng_seed, {12, 34, 56}}.

** basho\_bench\_driver\_riakclient Settings

   These configuration settings apply to the
   /basho\_bench\_driver\_riakclient/ driver.

*** riakclient\_nodes

    List of Riak nodes to use for testing.

    : {riakclient_nodes, ['riak1@127.0.0.1', 'riak2@127.0.0.1']}.
    
*** riakclient\_cookie

    The Erlang cookie to use to connect to Riak clients. Default is ='riak'=.
    
    : {riakclient_cookie, riak}.

*** riakclient\_mynode

    The name of the local node. This is passed into
    =net_kernel:start/1= (http://erlang.org/doc/man/net_kernel.html).

    : {riakclient_mynode, ['basho_bench@127.0.0.1', longnames]}.

*** riakclient\_replies
    
    This value is used for R-values during a get operation, and
    W-values during a put operation.

    : % Expect 1 reply.
    : {riakclient_replies, 1}.

*** riakclient\_bucket

    The Riak bucket to use for reading and writing values. Default is =<<"test">>=.

    : % Use the "bench" bucket.
    : {riakclient_bucket, <<"bench">>}.

** basho\_bench\_driver\_dets Settings
   
   Not yet documented.

** basho\_bench\_driver\_http\_raw Settings

   Not yet documented.

* Custom Workers

  A custom worker must expose the following callbacks.

  : % Create the worker.
  : % ID is an integer.
  : new(ID) -> {ok, State} or {error, Reason}.

  : % Run an operation.
  : run(Op, KeyGen, ValueGen, State) -> {ok, NewState} or {error, Reason, NewState}

  See the existing drivers for more details.

